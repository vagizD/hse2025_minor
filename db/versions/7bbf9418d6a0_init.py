""""INIT"

Revision ID: 7bbf9418d6a0
Revises: 
Create Date: 2025-04-17 21:07:33.734079

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "7bbf9418d6a0"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "Clinics",
        sa.Column(
            "ClinicID", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("Name", sa.Text(), nullable=False),
        sa.Column("Address", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("ClinicID"),
    )
    op.create_table(
        "DoctorTypes",
        sa.Column(
            "DoctorTypeID", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("DoctorType", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("DoctorTypeID"),
    )
    op.create_table(
        "Qualifications",
        sa.Column(
            "QualificationID", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("Qualification", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("QualificationID"),
    )
    op.create_table(
        "Treatments",
        sa.Column(
            "TreatmentID", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("TreatmentType", sa.Text(), nullable=False),
        sa.Column("TreatmentDescription", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("TreatmentID"),
    )
    op.create_table(
        "Doctors",
        sa.Column(
            "DoctorID", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("DoctorTypeID", sa.Integer(), nullable=False),
        sa.Column("QualificationID", sa.Integer(), nullable=False),
        sa.Column("FirstName", sa.Text(), nullable=False),
        sa.Column("LastName", sa.Text(), nullable=False),
        sa.Column("MiddleName", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["DoctorTypeID"],
            ["DoctorTypes.DoctorTypeID"],
        ),
        sa.ForeignKeyConstraint(
            ["QualificationID"],
            ["Qualifications.QualificationID"],
        ),
        sa.PrimaryKeyConstraint("DoctorID"),
    )
    op.create_table(
        "Patients",
        sa.Column(
            "PatientID", sa.Integer(), autoincrement=True, nullable=False
        ),
        sa.Column("ClinicID", sa.Integer(), nullable=False),
        sa.Column("FirstName", sa.Text(), nullable=False),
        sa.Column("LastName", sa.Text(), nullable=False),
        sa.Column("MiddleName", sa.Text(), nullable=True),
        sa.Column("BirthDate", sa.Date(), nullable=False),
        sa.Column("PassportSeries", sa.Text(), nullable=False),
        sa.Column("PassportNumber", sa.Text(), nullable=False),
        sa.Column("InsurancePolicy", sa.Text(), nullable=False),
        sa.Column("CMIPolicy", sa.Text(), nullable=False),
        sa.Column("City", sa.Text(), nullable=False),
        sa.Column("Address", sa.Text(), nullable=False),
        sa.Column("Login", sa.Text(), nullable=False),
        sa.Column("Password", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["ClinicID"],
            ["Clinics.ClinicID"],
        ),
        sa.PrimaryKeyConstraint("PatientID"),
    )
    op.create_table(
        "Cards",
        sa.Column("PatientID", sa.Integer(), nullable=False),
        sa.Column(
            "CreationDatetime", sa.DateTime(timezone=True), nullable=False
        ),
        sa.Column("Filename", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["PatientID"],
            ["Patients.PatientID"],
        ),
        sa.PrimaryKeyConstraint("PatientID"),
    )
    op.create_table(
        "Doctor2Clinic",
        sa.Column("ClinicID", sa.Integer(), nullable=False),
        sa.Column("DoctorID", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["ClinicID"],
            ["Clinics.ClinicID"],
        ),
        sa.ForeignKeyConstraint(
            ["DoctorID"],
            ["Doctors.DoctorID"],
        ),
        sa.PrimaryKeyConstraint("ClinicID", "DoctorID"),
    )
    op.create_table(
        "Doctor2Treatment",
        sa.Column("DoctorID", sa.Integer(), nullable=False),
        sa.Column("TreatmentID", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["DoctorID"],
            ["Doctors.DoctorID"],
        ),
        sa.ForeignKeyConstraint(
            ["TreatmentID"],
            ["Treatments.TreatmentID"],
        ),
        sa.PrimaryKeyConstraint("DoctorID", "TreatmentID"),
    )
    op.create_table(
        "Schedule",
        sa.Column("DoctorID", sa.Integer(), nullable=False),
        sa.Column("Time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("ClinicID", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["DoctorID", "ClinicID"],
            ["Doctor2Clinic.DoctorID", "Doctor2Clinic.ClinicID"],
        ),
        sa.PrimaryKeyConstraint("DoctorID", "Time", "ClinicID"),
    )
    op.create_table(
        "VisitRecords",
        sa.Column("DoctorID", sa.Integer(), nullable=False),
        sa.Column("Time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("InsertionTime", sa.DateTime(timezone=True), nullable=False),
        sa.Column("ClinicID", sa.Integer(), nullable=False),
        sa.Column("PatientID", sa.Integer(), nullable=False),
        sa.Column("IsTaken", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["DoctorID", "Time", "ClinicID"],
            ["Schedule.DoctorID", "Schedule.Time", "Schedule.ClinicID"],
        ),
        sa.ForeignKeyConstraint(
            ["PatientID"],
            ["Patients.PatientID"],
        ),
        sa.PrimaryKeyConstraint("DoctorID", "Time", "InsertionTime"),
    )
    op.create_table(
        "Visits",
        sa.Column("DoctorID", sa.Integer(), nullable=False),
        sa.Column("Time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("InsertionTime", sa.DateTime(timezone=True), nullable=False),
        sa.Column("ClinicID", sa.Integer(), nullable=False),
        sa.Column("PatientID", sa.Integer(), nullable=False),
        sa.Column("TreatmentID", sa.Integer(), nullable=False),
        sa.Column("Talon", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["DoctorID", "Time", "InsertionTime"],
            [
                "VisitRecords.DoctorID",
                "VisitRecords.Time",
                "VisitRecords.InsertionTime",
            ],
        ),
        sa.ForeignKeyConstraint(
            ["DoctorID", "TreatmentID"],
            ["Doctor2Treatment.DoctorID", "Doctor2Treatment.TreatmentID"],
        ),
        sa.ForeignKeyConstraint(
            ["PatientID"],
            ["Patients.PatientID"],
        ),
        sa.PrimaryKeyConstraint("DoctorID", "Time"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("Visits")
    op.drop_table("VisitRecords")
    op.drop_table("Schedule")
    op.drop_table("Doctor2Treatment")
    op.drop_table("Doctor2Clinic")
    op.drop_table("Cards")
    op.drop_table("Patients")
    op.drop_table("Doctors")
    op.drop_table("Treatments")
    op.drop_table("Qualifications")
    op.drop_table("DoctorTypes")
    op.drop_table("Clinics")
    # ### end Alembic commands ###
